-- @path SWPM=/spdt/src/main/resources/es/uca/spifm/spdt/deployment/swpm/SoftwareWorkProductModel.ecore
-- @path VMM=/spdt/src/main/resources/es/uca/spifm/spdt/genericTools/vmm/VisualModelingtoolModel.ecore


module swpm2vmm;
create output: VMM from input: SWPM;

--- Matching Project with ModelRepository
rule Project2ModelRepository {
 from
  proj: SWPM!Project
 to
  db: VMM!ModelRepository(
   projects <- thisModule.Project2Project(proj)
  )
}


--- Matching Project with Project
lazy rule Project2Project {
 from
  proj: SWPM!Project
 to
  db: VMM!Project (
   packages <- proj.workproducts,
   name <- proj.name,
   description <- proj.description
   
  )
}

--- Matching DocumentaryWorkProducts with Package
rule DocumentaryWorkProduct2Package {
 from
  doc: SWPM!DocumentaryWorkProduct
 to
  pack: VMM!Package (
   name <- doc.name,
   description <- doc.description,
   embeddedPackages <- doc.sections
  )
}

--- Matching Section with Package
rule Section2Package {
 from
  sec: SWPM!Section
 to
  pack: VMM!Package (
   name <- sec.name,
   description <- sec.description,
   embeddedPackages <- sec.embeddedSections,
   diagrams <- sec.models -> collect(model | thisModule.resolveTemp(model,'diag')),
   elements <- sec.models -> collect(model | thisModule.resolveTemp(model,'element')),
   elements <- sec.specifications -> collect(model | thisModule.resolveTemp(model,'element'))
  )
}

--- Matching Model with Diagram and Element
rule Model2DiagramAndElement {
 from
  model: SWPM!Model
 to
  element: VMM!Element (
   name <- 'Default '.concat(thisModule.obtainElementType(model.type)).concat(' for ').concat(model.name),
   description <- 'Example description of the '.concat(thisModule.obtainElementType(model.type)),
   type <- thisModule.obtainElementType(model.type)
  ),
  diag: VMM!Diagram (
   name <- model.name,
   description <- model.description,
   type <- model.type,
   containedElements <- element
  )
}

--- Matching Specification (item list) with Element
rule ItemListSpecification2Element{
 from
  spec: SWPM!Specification(spec.type=#ITEMLIST)
 to
  element: VMM!Element (
   name <- spec.name.concat(' Default Item '),
   description <- spec.description,
   type <- #REQUIREMENT
  )
}   

--- Matching Specification (textual) with Artifact
rule TextualSpecification2Element{
 from
  spec: SWPM!Specification(spec.type=#TEXTUAL)
 to
  element: VMM!Element (
   name <- spec.name,
   description <- spec.description,
   type <- #ARTIFACT
  )
}   

--- Auxiliary function
helper def: obtainElementType(diagram: String): String =
 Map{
    (#CLASS,
    'CLASS'),
    (#USECASE,
    'USECASE'),
    (#COMPONENT,
    'COMPONENT'),
    (#DEPLOYMENT,
    'NODE'),
    (#SEQUENCE,
    'CLASS'),
    (#STATECHART,
    'STATE'),
    (#COLLABORATION,
    'CLASS'),
    (#ACTIVITY,
    'ACTIVITY')}.get(diagram);
